ctx.save() ctx.restore() 有点不清楚 面向对象的饼图

var pie=(function （）{})() 和 (!function (){})() 有什么区别

!function(){}()
-->返回值为布尔值
-->执行过程是：首先获取函数的返回值，再将返回值取反
    -->举例：
    !function(){
        return 10;
    }()  -->自执行函数的返回值为10， !10-->false

(function(){})()返回的是一个闭包函数


刮刮乐案例中, 判断个数是否已经达到总数的一半, sum>=(canvas.width*canvas.height/2), 为什么是高度/2啊?
    --><canvas width="800" height="600"></canvas>
        -->canvas标签水平方向上有800个像素点
        -->.........垂直方向上有600个像素点
        -->该画布中一共有480000个像素点
    -->canvas.width*canvas.height：表示画布中所有的像素点的个数
        -->比如说画布宽200，高200，那么表示画布中一共有40000个像素点



上课的时候，多思考多回答问题，绝对是集中注意力的好办法

抓住时间的尾巴。。。

绘制着一个围绕中心点旋转矩形中不用设置save 和 restore 依然可以实现旋转，为什么还要设置呢？

是否可以画布套画布? 以后具体怎么使用？ 沙箱模式为什么前面var ;然后返回一个函数，而且把实例放在函数中？？？不懂
<canvas>
    <canvas></canvas>
</canvas>
    -->一定不行

--沙箱模式用变量接受返回值，为了让用户拥有了访问这个功能的入口

var radian=2*Math.PI*rate; 不是很明白
    -->饼图
    -->rate表示数据所占据的比重(值返回：0-1之间)
    -->2*Math.PI表示一个整圆的弧度差，知道了数据的比重，也就知道该扇形在圆中所占据的弧度差：var radian=2*Math.PI*rate

闭包 望老师答疑解惑
-->使用：掌握沙箱模式（☆☆☆☆☆）

为什么i=3？？？？？？？？？
    -->刮刮乐

希望老师下次如果预计六点以后下课，能在五点二十给点时间去个厕所，连续时间有点长，既想学习，又不想上课断节去厕所！



注释比较少，晚自习再看代码就不知道是什么了，如果再听一遍视频有点浪费时间，其他讲的挺好的！



终于能自己独自写个面向对象的小demo了 虽然就几十行代码 但是看得懂离写的出来真的是不一样的状态 谢谢老师



有时候敲代码有一种时来天地皆同力，运去英雄不自由的感觉，发挥十分不稳定，敢问上仙可有办法破解



需要自己多敲代码

恢复状态 和保存 状态栈 这一块 有点模糊 希望老师 再讲讲案例

建议老师在不重要的地方可以速度快一点，例如今天的给饼图绘制文字时求绘制点的坐标，此时可以快一点，面向对象或其他复杂问题的时候希望尽量详尽一些